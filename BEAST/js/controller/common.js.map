{"version":3,"file":"common.js","sourceRoot":"","sources":["common.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AACH;IAKI;;;;OAIG;IACH,YAAY,SAAkB,EAAE,WAAoB;QAE5C,IAAI,CAAC,SAAS,GAAK,SAAS,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAEL;;;;OAIG;IACI,MAAM,CAAC,MAA8B;QAEpC,MAAM,CAAC,CAAE,CAAC,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,MAAM,CAAC,WAAW,CAAC,CAAE,CAAC;IAChG,CAAC;CACR;AAED;;;;;;;;;;GAUG;AACH,gCAAmC,KAAW,EAAE,OAAW;IAEnD,IAAI,KAAK,GAAY,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IAC/C,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CACf,CAAC;QACG,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC3B,CAAC;IACD,MAAM,CAAC,KAAK,CAAC;AACjB,CAAC","sourcesContent":["/**\n * Represents a global Identifier for a component type.\n * This is to be used to associate a component instance with it's type.\n * Since Components which appear in multiple libraries are considered\n * different types, this ID incorporates also the ID of the library.\n *\n * Note:\n *\n * LibraryIDs are supposed to be unique per project\n * ComponentIDs are unique per Library\n *\n * TODO Serialization for saving in JSON format,\n * is this really necessary or can we just cast?\n *\n * Created by msee on 6/19/17.\n */\nclass GlobalComponentTypeID\n{\n    public readonly libraryID : string;\n    public readonly componentID : string;\n    \n    /**\n     *\n     * @param libraryID The ID of the library in which the component is contained.\n     * @param componentID\n     */\n    constructor(libraryID : string, componentID : string)\n        {\n            this.libraryID   = libraryID;\n            this.componentID = componentID;\n        }\n    \n    /**\n     * Checks if the target equals this instance.\n     * @param target\n     * @returns {boolean}\n     */\n    public equals(target : GlobalComponentTypeID) : boolean\n        {\n            return ( (this.libraryID == target.libraryID) && (this.componentID == target.componentID) );\n        }\n}\n\n/**\n * Removes on instance of the specified element from the array.\n * This function mutates the array and returns a reference on the array.\n *\n * If the element is not found in the array, the array will not\n * be changed.\n *\n * @param array\n * @param element\n * @returns {T[]}\n */\nfunction arrayRemoveElementOnce<T>(array : T[], element : T) : T[]\n    {\n        let index : number = array.indexOf(element, 0);\n        if (index > -1)\n        {\n            array.splice(index, 1);\n        }\n        return array;\n    }\n"]}