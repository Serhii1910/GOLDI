{"version":3,"file":"BeastController.js","sourceRoot":"","sources":["BeastController.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by mseeber on 5/10/17.\n */\n\n\n///<reference path=\"./common.ts\" />\n///<reference path=\"../model/model.ts\" />\n///<reference path=\"../fancytree/treeController.ts\" />\n///<reference path=\"../d_ts/jquery.d.ts\" />\n///<reference path=\"../d_ts/simcir.d.ts\" />\n\n\n/**\n * This class contains all startup logic for BEAST and thus marks the entry point\n * when using beast.\n */\nclass BeastController\n{\n    /**\n     * BEAST-Version\n     * @type {string}\n     */\n    public static readonly BEAST_VERSION : string = '1.0.0';\n    \n    public static readonly BASIC_LIB_ID          = 'beast-basic';\n    public static readonly BASIC_COMPOUND_LIB_ID = 'beast-basic-compound';\n    public static readonly DEPOSIT_LIB_ID        = 'beast-deposit';\n    \n    \n    public static readonly READ_ONLY_LIB_IDS            = [BeastController.BASIC_LIB_ID, BeastController.BASIC_COMPOUND_LIB_ID];\n    protected static basicComponents : Array<Component> = [];\n    \n    public persistenceController : PersistenceController;\n    public treeController : TreeController;\n    public workspaceController : WorkspaceController;\n    public menubarController;\n    public basicComponentsLib : Library;\n    public basicComplexComponentsLib : Library;\n    \n    \n    constructor(Callback: Function, localStoragePrefix: string = \"\")\n        {\n            this.persistenceController = new PersistenceController(this, localStoragePrefix);\n            this.initDefaultProject(() => {\n                this.treeController      = new TreeController(this);\n                this.workspaceController = new WorkspaceController(this);\n                this.menubarController   = new MenubarController(this);\n\n                this.workspaceController.resetEditors();\n\n                if(Callback !== undefined)\n                    Callback();\n            });\n\n            if(window.location.href.search(\"loadBeastFile\") !== -1){\n                $.getJSON(window.location.href.match(/[^?]*\\?[^=]*=(.*)/)[1],(data)=> {\n                    if(data !== null)\n                        this.persistenceController.setCurrentProject(this.persistenceController.loadProjectFromJSON(JSON.stringify(data)));\n                });\n            }\n        }\n    \n    /**\n     * Adds the version number as content to all HTML elements with the version-label class.\n     */\n    public initVersion()\n        {\n            //TODO maybe move into editor Controller or menubar controller?\n            $('.version-label')\n                .append(BeastController.BEAST_VERSION);\n        }\n    \n    public invalidBEASTSession() : void\n        {\n            InfoDialog.showDialog('Multiple instances of BEAST are not allowed!');\n        }\n    \n    /**\n     * returns true if the current project is dirty (retains unsaved state)\n     * @returns {boolean}\n     */\n    public isDirty() : boolean\n        {\n            return this.persistenceController.isDirty();\n        }\n    \n    /**\n     * Creates a new project and switches to it\n     */\n    public createNewProject()\n        {\n            this.persistenceController.createNewProject();\n        }\n    \n    public listProjects() : string[]\n        {\n            return this.persistenceController.getProjects();\n        }\n    \n    /**\n     * Loads project of the specified name\n     */\n    public loadProject(name : string)\n        {\n            this.persistenceController.loadProject(name);\n        }\n    \n    /**\n     * returns the Library of the given key or null if no\n     * Library with the given key exists.\n     *\n     * @param id Project-unique Library ID\n     * @returns {any} Library or null\n     */\n    public resolveLibrary(id : string) : Library\n        {\n            switch (id)\n            {\n                //handle the special libs\n                case this.basicComponentsLib.ID:\n                    return this.basicComponentsLib;\n                case this.basicComplexComponentsLib.ID:\n                    return this.basicComplexComponentsLib;\n                //handle the user libs\n                default:\n                    let userLibraries = this.persistenceController.getLibraries();\n                    for (let lib of userLibraries)\n                    {\n                        if (lib.ID == id)\n                        {\n                            return lib;\n                        }\n                    }\n                    //lib not found\n                    return null;\n            }\n            \n        }\n    \n    /**\n     * Returns a Component Type from it's global ID\n     *\n     * @param id\n     * @returns {Component} Component or null if no Component with corresponding key is found\n     */\n    public resolveComponentType(id : GlobalComponentTypeID) : Component\n        {\n            let lib = this.resolveLibrary(id.libraryID);\n            //in case an invalid lib ID is delivered\n            if (null == lib)\n            {\n                return null;\n            }\n            for (let component of lib.components)\n            {\n                if (component.ID == id.componentID)\n                {\n                    return component;\n                }\n            }\n            //component not found\n            return null;\n        }\n    \n    /**\n     * modelChanged() is called when the model is changed.\n     */\n    modelChanged()\n        {\n        \n        }\n    \n    /**\n     * projectChanged() is called when the project is changed.\n     */\n    projectChanged()\n        {\n            const oldSI = this.getSimulationInterface();\n            this.checkForDepositLibrary();\n            this.treeController.reloadTree();\n            this.workspaceController.resetEditors();\n\n            const newSI = this.getSimulationInterface();\n            oldSI.transferCallbacks(newSI);\n        }\n    \n    private checkForDepositLibrary()\n        {\n            let userLibraries = this.persistenceController.getLibraries();\n            for (const lib of userLibraries)\n            {\n                if (lib.ID === BeastController.DEPOSIT_LIB_ID)\n                {\n                    return;\n                }\n            }\n            userLibraries.push(new Library(BeastController.DEPOSIT_LIB_ID, 'Deposit'));\n        }\n    \n    /**\n     * This loads the default project and initializes also the basic libraries.\n     * If the default project is a new empty project, the deposit gets added to the projects\n     * persistent libraries.\n     */\n    public initDefaultProject(Callback : Function)\n        {\n            this.basicComponentsLib            = new Library(BeastController.BASIC_LIB_ID, 'Basic Components');\n            this.basicComponentsLib.components = BeastController.basicComponents;\n            this.persistenceController.loadStaticLibrary('BEAST/assets/beast-basic-compound.bdcl', (result) => {\n                this.basicComplexComponentsLib = result;\n                this.checkForDepositLibrary();\n                Callback();\n            });\n        }\n    \n    /**\n     * Checks if the specified Library is a basic read only Library\n     *\n     * @param library\n     */\n    public static isReadOnlyLibrary(libraryID : string) : boolean\n        {\n            //is there a match in the list?\n            return (BeastController.READ_ONLY_LIB_IDS.indexOf(libraryID) > -1);\n        }\n    \n    /**\n     * FIXME comment\n     * TODO is this still used by the Workspace interface?\n     * @param component\n     * @param id\n     */\n    public componentModified(component : CompoundComponent, id : GlobalComponentTypeID)\n        {\n            console.assert(component.ID === id.componentID);\n            if (id.componentID == 'project')\n            {\n                this.persistenceController.getCurrentProject().circuit = component;\n            }\n            else\n            {\n                const lib = this.resolveLibrary(id.libraryID);\n                console.assert(lib !== null);\n                for (let i in lib.components)\n                {\n                    if (lib.components[i].ID == id.componentID)\n                    {\n                        lib.components[i] = component;\n                    }\n                }\n            }\n            this.persistenceController.markDirty();\n        }\n    \n    /**\n     * Checks if the given LibraryID equals one of the basic libraries\n     * @param libraryID ID to check\n     * @returns {boolean} true, if ID equals one of the basic libraries\n     */\n    public static isBasicLibrary(libraryID : string) : boolean\n        {\n            return libraryID === BeastController.BASIC_LIB_ID || libraryID === BeastController.BASIC_COMPOUND_LIB_ID || libraryID === BeastController.DEPOSIT_LIB_ID;\n        }\n    \n    /**\n     * Checks if the given global id refers to a basic component.\n     * //TODO deprecated by the fact, that we use separate classes now\n     * @param id\n     * @returns {boolean}\n     */\n    public isBasicComponentType(id : GlobalComponentTypeID) : boolean\n        {\n            let lib = this.resolveLibrary(id.libraryID);\n            //There is only one basic lib with basic omponents\n            //All other libs contain Compound Components\n            return (lib.ID == BeastController.BASIC_LIB_ID);\n        }\n    \n    /**\n     * Puts a new component with the desired Name into the deposit of the current project\n     * and returns the component.\n     *\n     * On Failure, null is returned and no Component is inserted ino the deposit\n     *\n     * @return {}\n     */\n    public createComponent(component : CompoundComponent | string) : GlobalComponentTypeID\n        {\n            //TODO maybe better handling?\n            const name = (component instanceof CompoundComponent) ? component.name : component;\n            const id   = PersistenceController.generateComponentId(name);\n            if (component instanceof CompoundComponent) //Cannot check for instanceof string\n            {\n                component = new CompoundComponent(id, component.name, component.devices, component.connectors);\n            }\n            else\n            {\n                component = new CompoundComponent(id, component, [], []);\n            }\n            const globalId = new GlobalComponentTypeID(BeastController.DEPOSIT_LIB_ID, id);\n            \n            const lib = this.resolveLibrary(globalId.libraryID);\n            console.assert(lib !== null);\n            lib.addComponent(component);\n            \n            this.treeController.addComponent(globalId);\n            this.persistenceController.markDirty();\n            return globalId;\n        }\n    \n    public createAndOpenComponent(component : CompoundComponent | string)\n        {\n            this.workspaceController.openComponent(this.createComponent(component));\n        }\n    \n    public reorderComponentAfter(startComponentID : GlobalComponentTypeID, insertComponentID : GlobalComponentTypeID) : boolean\n        {\n            const libArr     = this.resolveLibrary(startComponentID.libraryID).components;\n            const startComp  = this.resolveComponentType(startComponentID);\n            const insertComp = this.resolveComponentType(insertComponentID);\n            if (startComp && insertComp)\n            {\n                arrayRemoveElementOnce(libArr, insertComp);\n                libArr.splice(libArr.indexOf(startComp) + 1, 0, insertComp);\n                this.persistenceController.markDirty();\n                return true;\n            }\n            return false;\n        }\n    \n    /**\n     * Deletes a single Component from the Project, specified by it's key\n     * If the component can not be deleted due to dependencies,\n     * this method returns false else true.\n     *\n     * @param key the global key of the component as string TODO new key format\n     * @returns {boolean} false if the component can not be deleted.\n     */\n    public deleteSingleComponent(key : GlobalComponentTypeID) : boolean\n        {\n            let containingLib = this.resolveLibrary(key.libraryID);\n            if (null == containingLib)\n            {\n                return false;\n            }\n            if (BeastController.isReadOnlyLibrary(containingLib.ID))\n            {\n                return false;\n            }\n            \n            let component = this.resolveComponentType(key);\n            if (component == null)\n            {\n                //component not found\n                return false;\n            }\n            \n            let blockingDependencies : string[] = [];\n            for(let c of containingLib.components)\n            {\n                //Cast is safe because we know it is a user lib at this point\n                let comp : CompoundComponent = <CompoundComponent> c;\n                if(comp.directlyDependsOn(key))\n                {\n                    blockingDependencies.push(comp.ID)\n                }\n            }\n            if(blockingDependencies.length == 0)\n            {\n                containingLib.removeComponent(component);\n                this.persistenceController.markDirty();\n                return true;\n            } else {\n                let msg = 'Can not delete Compoenent ' + component.name +\n                          ' from Library ' + containingLib.name +\n                          ' since following components in Library ' + containingLib.name +\n                          ' depend on it: <br>';\n                for(let ID of blockingDependencies)\n                {\n                    msg = msg.concat('<br>').concat(ID);\n                    \n                }\n                InfoDialog.showDialog(msg);\n                return false;\n            }\n        }\n    \n    /**\n     * Creates a copy of the Component behind the specified Global Component ID\n     * in the Library specified by the targetLibraryID.\n     *\n     * This operation may fail due to overlapping IDs\n     * @param componentID\n     * @param targetLibraryID\n     * @return {GlobalComponentTypeID | null}\n     */\n    public copyComponent(componentID : GlobalComponentTypeID, targetLibraryID : string) : GlobalComponentTypeID\n        {\n            //check if component is not moved over library boundary\n            if(componentID.libraryID == targetLibraryID)\n            {\n                //do nothing\n                return null;\n            }\n            //TODO change error signaling\n            let targetLibrary = this.resolveLibrary(targetLibraryID);\n            if (BeastController.isReadOnlyLibrary(targetLibrary.ID))\n            {\n                InfoDialog.showDialog('Library: '.concat(targetLibrary.name)\n                                                 .concat(' is read only.'));\n                return null;\n            }\n            if (this.isBasicComponentType(componentID))\n            {\n                InfoDialog.showDialog('Basic components can not be copied into other libraries.');\n                return null\n            }\n            \n            //check if ID collides in target library\n            let newTargetComponentID = new GlobalComponentTypeID(targetLibraryID, componentID.componentID);\n            {\n                let testTarget = this.resolveComponentType(newTargetComponentID);\n                \n                if(null != testTarget) {\n                    InfoDialog.showDialog('The component: '.concat(testTarget.name)\n                                                           .concat(' already exists in Library: ').concat(targetLibrary.name));\n                    return null;\n                }\n            }\n            \n            let sourceComponent : CompoundComponent = <CompoundComponent> this.resolveComponentType(componentID);\n            \n            //all dependencies are resolved now, so conflicts and problems can be detected before\n            //actually copying anything\n            \n            //extract all dependecies that need to be copied\n            let copyDependencies : GlobalComponentTypeID[] = [];\n            for (let d of sourceComponent.listAllDependencies(this))\n            {\n                //exclude all the read only components\n                if (!BeastController.isReadOnlyLibrary(d.libraryID))\n                {\n                    copyDependencies.push(d);\n                }\n            }\n    \n            if(copyDependencies.length != 0)\n            {\n                let msg = 'The source component '+ sourceComponent.name + ' dependes on the following components.';\n    \n                for(let d of copyDependencies)\n                {\n                    msg = msg.concat('<br>').concat(d.libraryID + ' ' + d.componentID);\n                }\n                InfoDialog.showDialog(msg);\n            }\n            \n            //also copy all dependencies that must be copied\n            for(let d of copyDependencies)\n            {\n                this.copyComponent(d, targetLibraryID);\n            }\n    \n            let newComponent = sourceComponent.copy();\n            targetLibrary.components.push(newComponent);\n            this.treeController.addComponent(newTargetComponentID);\n            this.persistenceController.markDirty();\n            return newTargetComponentID;\n        }\n    \n    /**\n     * Deletes a user defined Library from the current project if there are\n     * no dependencies in the main circuit.\n     *\n     * @param libID\n     * @returns {boolean}\n     */\n    public deleteLibrary(libID : string) : boolean\n        {\n            let lib = this.resolveLibrary(libID);\n            //check if lib is read only and valid\n            if (null == lib)\n            {\n                return false;\n            }\n            if (BeastController.isBasicLibrary(lib.ID))\n            {\n                return false;\n            }\n            //FIXME check for dependencies in the work area\n            let projectLibs = this.persistenceController.getLibraries();\n            arrayRemoveElementOnce(projectLibs, lib);\n            this.persistenceController.markDirty();\n            return true;\n        }\n    \n    public reorderLibraryAfter(startLibID : string, insertLibID : string) : boolean\n        {\n            const startLib  = this.resolveLibrary(startLibID);\n            const insertLib = this.resolveLibrary(insertLibID);\n            if (startLib && insertLib)\n            {\n                const libs = this.persistenceController.getLibraries();\n                arrayRemoveElementOnce(libs, insertLib);\n                libs.splice(libs.indexOf(startLib) + 1, 0, insertLib);\n                this.persistenceController.markDirty();\n                return true;\n            }\n            return false;\n        }\n    \n    /**\n     * Adds the specified library to the current project,\n     * checking for name collisions.\n     *\n     * @param newLib the specified library\n     * @returns {any} null on faulure, the specified lib on succes\n     */\n    private addLibrary(newLib : Library) : Library\n        {\n            let libs = this.getLibraries();\n            \n            // verify that the new Library does not collide in name or ID\n            // with any of the existing libs\n            for (let lib of libs)\n            {\n                if (lib.name == newLib.name || lib.ID == newLib.ID)\n                {\n                    //TODO rather throw an exception?\n                    //indicate error by returning null\n                    return null;\n                }\n            }\n            \n            this.persistenceController.getCurrentProject()\n                .pushLibrary(newLib);\n            this.treeController.addLibrary(newLib);\n            this.persistenceController.markDirty();\n            \n            return newLib;\n        }\n    \n    /**\n     * Creates a new Library in the current project with the given Name and assigns an ID to it.\n     * Currently no sanity checks made, but IDs should hav fairly low probability of collision.\n     * //TODO assure unique IDs\n     * A reference on the newly created Instance is returned or null in case of failure.\n     *\n     * @param name\n     * @returns {Library}\n     */\n    public createLibrary(name : string) : Library\n        {\n            let newID : string = PersistenceController.generateComponentId(name);\n            let newLib         = new Library(newID, name);\n            \n            if (this.addLibrary(newLib) == null)\n            {\n                //could not add Library due to name collision\n                return null;\n            }\n            \n            return newLib;\n        }\n    \n    /**\n     * Imports the specified file as a new library\n     * @param file\n     */\n    public importLibrary(file : File) : void\n        {\n            const controller = this;\n            \n            this.persistenceController.loadLibraryFromFile(file, function(lib : Library)\n            {\n                if (lib != null)\n                {\n                    if (controller.addLibrary(lib) == null)\n                    {\n                        InfoDialog.showDialog('Can\\'t import this library: a library with this name already exists!');\n                    }\n                }\n                else\n                {\n                    InfoDialog.showDialog('Can\\'t import this library: invalid file content!');\n                }\n            });\n        }\n    \n    /**\n     * Initiates a Download for the given Library to a File with the given fileName.\n     * @param fileName\n     * @param lib\n     */\n    public downloadLibrary(fileName : string, lib : Library)\n        {\n            PersistenceController.downloadAsFile(fileName, lib);\n        }\n    \n    /**\n     *\n     * @returns {PersistenceController}\n     */\n    getPersistenceController() : PersistenceController\n        {\n            return this.persistenceController;\n        }\n    \n    \n    /**\n     * Registers a component as a basic component to BEAST\n     * Registered components can later be referenced in the\n     * Library for basic components\n     */\n    public static registerDefaultComponent(component : Component) : void\n        {\n            BeastController.basicComponents.push(component);\n        }\n    \n    /**\n     * returns a list of all available libraries even read only ones\n     *\n     * @returns {Array<Library>}\n     */\n    public getLibraries() : Array<Library>\n        {\n            let libraries = Array<Library>();\n            libraries.push(this.basicComponentsLib);\n            libraries.push(this.basicComplexComponentsLib);\n            \n            //concat does not mutate original array, therefor assignment is needed\n            libraries = libraries.concat(this.persistenceController.getLibraries());\n            \n            return libraries;\n        }\n    \n    /**\n     * Returns a list of Libraries which can be exported.\n     * Changes to this list are not carried over to the persistence layer,\n     * chenges to the containing libs are carried over though.\n     *\n     * @returns {Array}\n     */\n    public getExportableLibraries() : Library[]\n        {\n            //create a new list and do not include the deposit\n            let libraries = [];\n            for (let lib of this.persistenceController.getLibraries())\n            {\n                if (lib.ID != BeastController.DEPOSIT_LIB_ID)\n                {\n                    libraries.push(lib);\n                }\n            }\n            return libraries;\n        }\n    \n    public getSimulationInterface() : SimulationInterface\n        {\n            return this.workspaceController.getSimulationInterface();\n        }\n\n    public reinitUI() {\n        this.workspaceController.reinitUI();\n    }\n}"]}