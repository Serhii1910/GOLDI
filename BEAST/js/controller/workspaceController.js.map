{"version":3,"file":"workspaceController.js","sourceRoot":"","sources":["workspaceController.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by maximilian on 30.05.17.\n */\n\ninterface WorkspaceBeastControllerInterface\n{\n    resolveComponentType(id : GlobalComponentTypeID) : Component;\n    getPersistenceController() : PersistenceController;\n    componentModified(component : CompoundComponent, id : GlobalComponentTypeID);\n    createComponent(component : CompoundComponent | string) : GlobalComponentTypeID;\n    createAndOpenComponent(component : CompoundComponent | string);\n}\n\nclass WorkspaceController\n{\n    protected editorControllers : Array<EditorController>;\n    protected currentEditor : EditorController;\n    \n    constructor(protected readonly controller : WorkspaceBeastControllerInterface)\n        {\n            this.editorControllers = [];\n        }\n    \n    /*\n     * resets the Editors to their basic state - only the main circuit of the project opened\n     */\n    resetEditors()\n        {\n            for (let editor of this.editorControllers.slice()) //slice to create new, independent list\n            {\n                this.closeEditor(editor);\n            }\n            \n            const maincircuit = this.controller.getPersistenceController()\n                                    .getCurrentProject().circuit;\n            this.openEditor(maincircuit, null, new GlobalComponentTypeID(null, maincircuit.ID), false);\n        }\n    \n    protected openEditor(component : CompoundComponent, originalID: GlobalComponentTypeID, id : GlobalComponentTypeID, closeable : boolean)\n        {\n            const editor = new EditorController(this, component, originalID, id, $('.tab-content'), $('#tabBar'), closeable);\n            \n            this.editorControllers.push(editor);\n            this.selectEditor(editor);\n        }\n    \n    closeEditor(editor : EditorController)\n        {\n            editor.remove();\n            this.editorControllers.splice(this.editorControllers.indexOf(editor), 1);\n            if (editor === this.currentEditor)\n            {\n                this.selectEditor(this.editorControllers[0]);\n            }\n        }\n    \n    selectEditor(editor : EditorController)\n        {\n            if (this.currentEditor !== undefined)\n            {\n                this.currentEditor.deactivateTab();\n            }\n            this.currentEditor = editor;\n            if (editor != undefined)\n                this.currentEditor.activateTab();\n        }\n    \n    openComponent(componentID : GlobalComponentTypeID)\n        {\n            let component = this.resolveComponentType(componentID);\n            if (Component.isCompound(component))\n            {\n                const openEditor: EditorController = this.editorControllers.find((ec) =>  {\n                    return ec.originalComponentID && componentID &&\n                           ec.originalComponentID.componentID === componentID.componentID &&\n                           ec.originalComponentID.libraryID === componentID.libraryID;\n                });\n                if (openEditor !== undefined)\n                    this.selectEditor(openEditor);\n                else\n                    this.openEditor(component, componentID, (componentID.libraryID == BeastController.DEPOSIT_LIB_ID) ? componentID : null, true);\n            }\n            else\n            {\n                InfoDialog.showDialog('Basic components cannot be edited!');\n            }\n        }\n    \n    resolveComponentType(id : GlobalComponentTypeID) : Component\n        {\n            return this.controller.resolveComponentType(id);\n        }\n    \n    getSimulationInterface() : SimulationInterface\n        {\n            return this.editorControllers[0].getSimulationInterface();\n        }\n    \n    componentModified(component : CompoundComponent, id : GlobalComponentTypeID)\n        {\n            this.controller.componentModified(component, id);\n        }\n    \n    public createComponent(component : CompoundComponent | string) : GlobalComponentTypeID\n        {\n            return this.controller.createComponent(component);\n        }\n    \n    public createAndOpenComponent(component : CompoundComponent | string)\n        {\n            this.controller.createAndOpenComponent(component);\n        }\n\n    public reinitUI() {\n        for (const editorCOntroller of this.editorControllers) {\n            editorCOntroller.reinitUI();\n        }\n    }\n}"]}